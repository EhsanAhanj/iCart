{"version":3,"sources":["polyfill.js","hooks/useLoader.js","components/common/FullpageLoader/FullpageLoader.jsx","App.js","serviceWorker.js","index.js"],"names":["window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","addBodyClass","className","body","classList","add","removeBodyClass","remove","FullpageLoader","useEffect","Array","map","DefaultLayout","React","lazy","Login","Register","Page404","Page500","Home","App","Suspense","fallback","exact","path","name","render","props","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"onEA+BA,WAEE,GAAmC,oBAAvBA,OAAOC,YAA6B,OAAO,EAEvD,SAASA,EAAcC,EAAOC,GAC5BA,EAASA,GAAU,CAAEC,SAAS,EAAOC,YAAY,EAAOC,YAAQC,GAChE,IAAIC,EAAMC,SAASC,YAAa,eAEhC,OADAF,EAAIG,gBAAiBT,EAAOC,EAAOC,QAASD,EAAOE,WAAYF,EAAOG,QAC/DE,EAGTP,EAAYW,UAAYZ,OAAOa,MAAMD,UAErCZ,OAAOC,YAAcA,EAbvB,G,4BC7BMa,G,OAAe,SAACC,GAAD,OAAeN,SAASO,KAAKC,UAAUC,IAAIH,KAC1DI,EAAkB,SAACJ,GAAD,OACtBN,SAASO,KAAKC,UAAUG,OAAOL,ICAjC,IAoBeM,EApBQ,WDER,IAAsBN,ECCnC,ODDmCA,ECDtB,CAAC,cDEdO,qBAAU,WAOR,OALAP,aAAqBQ,MACjBR,EAAUS,IAAIV,GACdA,EAAaC,GAGV,WACLA,aAAqBQ,MACjBR,EAAUS,IAAIL,GACdA,EAAgBJ,MAErB,CAACA,ICXF,yBAAKA,UAAU,eACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,kBAEjB,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,kBAEjB,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,qBCZnBU,EAAgBC,IAAMC,MAAK,kBAC/B,yDAIIC,EAAQF,IAAMC,MAAK,kBAAM,yDACzBE,EAAWH,IAAMC,MAAK,kBAAM,yDAC5BG,EAAUJ,IAAMC,MAAK,kBAAM,yDAC3BI,EAAUL,IAAMC,MAAK,kBAAM,yDAC3BK,EAAON,IAAMC,MAAK,kBAAM,wDAkDfM,MA9Cf,WACE,OACE,kBAAC,aAAD,KACE,kBAAC,IAAMC,SAAP,CAAgBC,SALA,kBAAC,EAAD,OAMd,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,SACLC,KAAK,aACLC,OAAQ,SAACC,GAAD,OAAW,kBAACZ,EAAUY,MAEhC,kBAAC,IAAD,CACEJ,OAAK,EACLC,KAAK,YACLC,KAAK,gBACLC,OAAQ,SAACC,GAAD,OAAW,kBAACX,EAAaW,MAEnC,kBAAC,IAAD,CACEJ,OAAK,EACLC,KAAK,OACLC,KAAK,WACLC,OAAQ,SAACC,GAAD,OAAW,kBAACV,EAAYU,MAElC,kBAAC,IAAD,CACEJ,OAAK,EACLC,KAAK,OACLC,KAAK,WACLC,OAAQ,SAACC,GAAD,OAAW,kBAACT,EAAYS,MAElC,kBAAC,IAAD,CACEH,KAAK,IACLD,OAAK,EACLE,KAAK,OACLC,OAAQ,SAACC,GAAD,OAAW,kBAACR,EAASQ,MAE/B,kBAAC,IAAD,CACEH,KAAK,aACLC,KAAK,YACLC,OAAQ,SAACC,GAAD,OAAW,kBAACf,EAAkBe,U,OC5C9BC,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCNNC,IAASN,OAAO,kBAAC,EAAD,MAAS9B,SAASqC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.46b7e75a.chunk.js","sourcesContent":["/*\n* required polyfills\n*/\nimport \"core-js\";\nimport 'core-js/features/set/map';\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol'\n// import 'core-js/es6/object'\n// import 'core-js/es6/function'\n// import 'core-js/es6/parse-int'\n// import 'core-js/es6/parse-float'\n// import 'core-js/es6/number'\n// import 'core-js/es6/math'\n// import 'core-js/es6/string'\n// import 'core-js/es6/date'\n// import 'core-js/es6/array'\n// import 'core-js/es6/regexp'\n// import 'core-js/es6/map'\n// import 'core-js/es6/weak-map'\n// import 'core-js/es6/set'\n// import 'core-js/es7/object'\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect'\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\n// import 'core-js/es7/reflect'\n\n// CustomEvent() constructor functionality in IE9, IE10, IE11\n(function () {\n\n  if ( typeof window.CustomEvent === \"function\" ) return false\n\n  function CustomEvent ( event, params ) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\n    var evt = document.createEvent( 'CustomEvent' )\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail )\n    return evt\n  }\n\n  CustomEvent.prototype = window.Event.prototype\n\n  window.CustomEvent = CustomEvent\n})()\n","import { useEffect } from \"react\";\n\nconst addBodyClass = (className) => document.body.classList.add(className);\nconst removeBodyClass = (className) =>\n  document.body.classList.remove(className);\n\nexport default function useBodyClass(className) {\n  useEffect(() => {\n    // Set up\n    className instanceof Array\n      ? className.map(addBodyClass)\n      : addBodyClass(className);\n\n    // Clean up\n    return () => {\n      className instanceof Array\n        ? className.map(removeBodyClass)\n        : removeBodyClass(className);\n    };\n  }, [className]);\n}\n","import React from \"react\";\nimport \"./FullpageLoader.scss\";\nimport useBodyClass from \"../../../hooks/useLoader\";\n\nconst FullpageLoader = () => {\n  useBodyClass([\"modal-open\"]);\n\n  return (\n    <div className=\"loader-mask\">\n      <div className=\"loader-container\">\n        <div className=\"loader--holder\">\n          <div className=\"loader---box\"></div>\n        </div>\n        <div className=\"loader--holder\">\n          <div className=\"loader---box\"></div>\n        </div>\n        <div className=\"loader--holder\">\n          <div className=\"loader---box\"></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FullpageLoader;\n","import React from \"react\";\nimport \"./App.scss\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport FullpageLoader from \"./components/common/FullpageLoader/FullpageLoader.jsx\";\n// Containers\nconst DefaultLayout = React.lazy(() =>\n  import(\"./components/dashboard/containers/DefaultLayout\")\n);\n\n// Pages\nconst Login = React.lazy(() => import(\"./pages/Login\"));\nconst Register = React.lazy(() => import(\"./pages/Register\"));\nconst Page404 = React.lazy(() => import(\"./pages/Page404\"));\nconst Page500 = React.lazy(() => import(\"./pages/Page500\"));\nconst Home = React.lazy(() => import(\"./pages/Home\"));\n\nconst loading = () => <FullpageLoader />;\n\nfunction App() {\n  return (\n    <HashRouter>\n      <React.Suspense fallback={loading()}>\n        <Switch>\n          <Route\n            exact\n            path=\"/login\"\n            name=\"Login Page\"\n            render={(props) => <Login {...props} />}\n          />\n          <Route\n            exact\n            path=\"/register\"\n            name=\"Register Page\"\n            render={(props) => <Register {...props} />}\n          />\n          <Route\n            exact\n            path=\"/404\"\n            name=\"Page 404\"\n            render={(props) => <Page404 {...props} />}\n          />\n          <Route\n            exact\n            path=\"/500\"\n            name=\"Page 500\"\n            render={(props) => <Page500 {...props} />}\n          />\n          <Route\n            path=\"/\"\n            exact\n            name=\"Home\"\n            render={(props) => <Home {...props} />}\n          />\n          <Route\n            path=\"/dashboard\"\n            name=\"Dashboard\"\n            render={(props) => <DefaultLayout {...props} />}\n          />\n        </Switch>\n      </React.Suspense>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"react-app-polyfill/ie9\"; // For IE 9-11 support\nimport \"react-app-polyfill/stable\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport \"./polyfill\";\n\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}