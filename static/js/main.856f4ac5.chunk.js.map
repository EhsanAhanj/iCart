{"version":3,"sources":["hooks/useSticky.js","hooks/useLoader.js","components/common/FullpageLoader/FullpageLoader.jsx","App.js","serviceWorker.js","index.js"],"names":["useSticky","useState","isSticky","setSticky","element","useRef","handleScroll","useCallback","current","window","scrollY","getBoundingClientRect","bottom","debounce","func","timeOut","wait","immediate","context","args","arguments","callNow","clearTimeout","setTimeout","apply","useEffect","addEventListener","removeEventListener","addBodyClass","className","document","body","classList","add","removeBodyClass","remove","FullpageLoader","Array","map","Navbar","React","lazy","Welcome","Home","App","Suspense","fallback","sticky","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAwCeA,MAtCf,WAAsB,IAAD,qBACWC,oBAAS,GADpB,mBACZC,EADY,KACFC,EADE,KAEbC,EAAUC,iBAAO,MACjBC,EAAeC,uBAAY,WAC3BH,EAAQI,UACVC,OAAOC,QAAUN,EAAQI,QAAQG,wBAAwBC,OACrDT,GAAU,GACVA,GAAU,MAEf,IAGGU,EAAWN,uBAAY,SAACO,GAAuC,IAC/DC,EAD8BC,EAAgC,uDAAzB,GAAIC,IAAqB,yDAElE,OAAO,WACL,IAAIC,EAAU,EACZC,EAAOC,EAKHC,EAAUJ,IAAcF,EAC9BO,aAAaP,GACbA,EAAUQ,YANI,WACZR,EAAU,KACLE,GAAWH,EAAKU,MAAMN,EAASC,KAIVH,GACxBK,GAASP,EAAKU,MAAMN,EAASC,MAElC,IASH,OAPAM,qBAAU,WAER,OADAhB,OAAOiB,iBAAiB,SAAUb,EAASP,IACpC,WACLG,OAAOkB,oBAAoB,UAAU,kBAAMrB,QAE5C,CAACO,EAAUP,IAEP,CAAEJ,WAAUE,YCnCfwB,G,YAAe,SAACC,GAAD,OAAeC,SAASC,KAAKC,UAAUC,IAAIJ,KAC1DK,EAAkB,SAACL,GAAD,OACtBC,SAASC,KAAKC,UAAUG,OAAON,ICAjC,IAoBeO,EApBQ,WDER,IAAsBP,ECCnC,ODDmCA,ECDtB,CAAC,cDEdJ,qBAAU,WAOR,OALAI,aAAqBQ,MACjBR,EAAUS,IAAIV,GACdA,EAAaC,GAGV,WACLA,aAAqBQ,MACjBR,EAAUS,IAAIJ,GACdA,EAAgBL,MAErB,CAACA,ICXF,yBAAKA,UAAU,eACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,SAEjB,yBAAKA,UAAU,UACb,yBAAKA,UAAU,SAEjB,yBAAKA,UAAU,UACb,yBAAKA,UAAU,YCZnBU,EAASC,IAAMC,MAAK,kBAAM,gCAC1BC,EAAUF,IAAMC,MAAK,kBAAM,sDAC3BE,EAAOH,IAAMC,MAAK,kBAAM,gCAefG,MAXf,WAAgB,IAAD,EACiB5C,IAAtBE,EADK,EACLA,SAAUE,EADL,EACKA,QAClB,OACE,kBAAC,IAAMyC,SAAP,CAAgBC,SALE,kBAAC,EAAD,OAMhB,kBAACP,EAAD,CAAQQ,OAAQ7C,IAChB,kBAACwC,EAAD,CAAStC,QAASA,IAClB,kBAACuC,EAAD,Q,MCLcK,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASvB,SAASwB,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.856f4ac5.chunk.js","sourcesContent":["import { useEffect, useState, useRef, useCallback } from \"react\";\n\nfunction useSticky() {\n  const [isSticky, setSticky] = useState(false);\n  const element = useRef(null);\n  const handleScroll = useCallback(() => {\n    if (element.current) {\n      window.scrollY > element.current.getBoundingClientRect().bottom\n        ? setSticky(true)\n        : setSticky(false);\n    } else return;\n  }, []);\n\n  // This function handle the scroll performance issue\n  const debounce = useCallback((func, wait = 20, immediate = true) => {\n    let timeOut;\n    return () => {\n      let context = this,\n        args = arguments;\n      const later = () => {\n        timeOut = null;\n        if (!immediate) func.apply(context, args);\n      };\n      const callNow = immediate && !timeOut;\n      clearTimeout(timeOut);\n      timeOut = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", debounce(handleScroll));\n    return () => {\n      window.removeEventListener(\"scroll\", () => handleScroll);\n    };\n  }, [debounce, handleScroll]);\n\n  return { isSticky, element };\n}\n\nexport default useSticky;\n","import { useEffect } from \"react\";\n\nconst addBodyClass = (className) => document.body.classList.add(className);\nconst removeBodyClass = (className) =>\n  document.body.classList.remove(className);\n\nexport default function useBodyClass(className) {\n  useEffect(() => {\n    // Set up\n    className instanceof Array\n      ? className.map(addBodyClass)\n      : addBodyClass(className);\n\n    // Clean up\n    return () => {\n      className instanceof Array\n        ? className.map(removeBodyClass)\n        : removeBodyClass(className);\n    };\n  }, [className]);\n}\n","import React from \"react\";\nimport \"./FullpageLoader.scss\";\nimport useBodyClass from \"../../../hooks/useLoader\";\n\nconst FullpageLoader = () => {\n  useBodyClass([\"modal-open\"]);\n\n  return (\n    <div className=\"loader-mask\">\n      <div className=\"loader-container\">\n        <div className=\"holder\">\n          <div className=\"box\"></div>\n        </div>\n        <div className=\"holder\">\n          <div className=\"box\"></div>\n        </div>\n        <div className=\"holder\">\n          <div className=\"box\"></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FullpageLoader;\n","import React from \"react\";\nimport useSticky from \"./hooks/useSticky.js\";\nimport \"./App.scss\";\nimport FullpageLoader from \"./components/common/FullpageLoader/FullpageLoader.jsx\";\n\nconst Navbar = React.lazy(() => import(\"./components/Header/Navbar\"));\nconst Welcome = React.lazy(() => import(\"./components/Header/Welcome\"));\nconst Home = React.lazy(() => import(\"./pages/Home\"));\n\nconst loading = () => <FullpageLoader />;\n\nfunction App() {\n  const { isSticky, element } = useSticky();\n  return (\n    <React.Suspense fallback={loading()}>\n      <Navbar sticky={isSticky} />\n      <Welcome element={element} />\n      <Home />\n    </React.Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}